# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  python:
    resource_class: small
    docker:
      - image: cimg/python:3.10.2

jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: mcr.microsoft.com/azure-cli
        #circleci/python:3.8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r requirements.txt
#            python3 -m pip install --upgrade pip
        #apt install -y python3-venv
        # python3 -m venv venv
        # . venv/bin/activate
        # pip3 install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      # deploy to Azure
      #- run:
      #    name: deploy to azure app
      #    command: |
      #      az webapp deployment source config-local-git \
      #        --name $APP_SERVICE_NAME \
      #        --resource-group $RESOURCE_GROUP_NAME \
      #        --output tsv
      
      # deploy to GCP
      #- run:
      #    name: deploy to app engine
      #    command: |
      #      echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      #      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      #      gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      #      gcloud app deploy