# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  azure-cli: circleci/azure-cli@1.2.2

jobs:
  verify-install:
    executor: azure-cli/default
    steps:
      - azure-cli/install
      - run:
          command: az -v
          name: Verify Azure CLI is installed

  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8.3
        #circleci/python:3.8
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install System Dependencies
          command: sudo apt-get update && sudo apt-get install

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r requirements.txt
#            apt install -y python3-venv
#            python3 -m venv venv
#            . venv/bin/activate
#            python3 -m pip install --upgrade pip
#            pip3 install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      # deploy to azure!
      - run:
          name: deploy to azure
          command: |
